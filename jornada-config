#!/bin/sh
# HP Jornada Config, based on the jornada-config script
#
# See LICENSE file for copyright and license details

INTERACTIVE=True
ASK_TO_REBOOT=0

USER=${SUDO_USER:-$(who -m | awk '{ print $1 }')}
MACHINE=`cat /proc/cpuinfo | grep Jornada | cut -c12-`
TITLE="HP Jornada Configuration (jornada-config)"
BTITLE=$MACHINE
# echo $USER
# echo $MACHINE

is_jornada () {
  if ! grep -q "HP Jornada" /proc/cpuinfo; then
    return 1
  else
    return 0
  fi
}

CMDLINE=/proc/cmdline

is_ssh() {
  if pstree -p | egrep --quiet --extended-regexp ".*sshd.*\($$\)"; then
    return 0
  else
    return 1
  fi
}

is_installed() {
    if [ "$(dpkg -l "$1" 2> /dev/null | tail -n 1 | cut -d ' ' -f 1)" != "ii" ]; then
      return 1
    else
      return 0
    fi
}

deb_ver () {
  ver=`cat /etc/debian_version | cut -d . -f 1`
  echo $ver
}

calc_wt_size() {
  WT_HEIGHT=13
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi
  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi
  WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
}

do_about() {
  whiptail --msgbox "\
This tool helps you with first time configuration
of your HP Jornada 7xx under Devuan Linux.\n\n
Contibuted to the community at hpcfactor.com
" 14 70 1
  return 0
}

do_expand_rootfs() {
  if [ $(id -u) -ne 0 ]; then
    whiptail --msgbox "This command must be run as superuser." 14 60 2
    return 0
  fi

  ROOT_PART="$(findmnt / -o source -n)"
  ROOT_DEV="/dev/$(lsblk -no pkname "$ROOT_PART")"
  PART_NUM="$(echo "$ROOT_PART" | grep -o "[[:digit:]]*$")"

  # Assume it's the DOS,root,swap layout, then partnum=2
  if [ "$PART_NUM" -ne 2 ]; then
    whiptail --msgbox "Your partition layout is not currently supported by this tool. Expected layout is DOS,root,swap." 14 60 2
    return 0
  fi

  whiptail --scrolltext --msgbox "Current Disklayout:\n$(parted "$ROOT_DEV" -s unit MB p | tail -n+7)" 14 60 2

  if (whiptail --title "Resize root partition" --yes-button "Continue" --no-button "Cancel"  --yesno "Now turning off swap and resizing partition $ROOT_PART - continue?" 14 60) then
    echo ""
  else
    whiptail --msgbox "Cancelled, no changes done." 10 60 2
    return 0
  fi

  whiptail --infobox "Disabling swap..." 14 60 1
  swapoff -a  > /tmp/resize.log
  whiptail --infobox "Dropping swap, changing root partition size..." 14 60 1
  parted --script -- "$ROOT_DEV" \
    rm 3 \
    resizepart 2 -256M \
    mkpart primary linux-swap -256 -0  >> /tmp/resize.log

  whiptail --infobox "Root partition has been resized.\n\nNow enlarging filesystem and re-creating swap..." 14 60 2
  mkswap /dev/hda3  >> /tmp/resize.log
  swapon -a  >> /tmp/resize.log
  resize2fs $ROOT_PART >> /tmp/resize.log

  whiptail --scrolltext  --msgbox "All done. Root partition using full disk capacity now.\n$(parted "$ROOT_DEV" -s unit MB p | tail -n+7)\n\nPlease review logfile /tmp/resize.log" 14 60 2
  whiptail --textbox /tmp/resize.log 14 60 2
}

is_number() {
  case $1 in
    ''|*[!0-9]*) return 0 ;;
    *) return 1 ;;
  esac
}

do_change_pass() {
  whiptail --msgbox "You will now be asked to enter a new password for the $USER user" 20 60 1
  passwd $USER &&
  whiptail --msgbox "Password changed successfully" 20 60 1
}

do_add_user() {
  NEWUSER="$1"
  while [ -z "$NEWUSER" ] && [ "$INTERACTIVE" = True ]; do
    NEWUSER=$(whiptail --inputbox "Please enter new user name" 20 60 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$NEWUSER" ]; then
      whiptail --msgbox "Please enter a non empty user name." 20 60
    fi
  done
  # add the NEWUSER
  useradd -G sudo -m -s /bin/bash $NEWUSER

  whiptail --msgbox "You will now be asked to enter a new password for the $NEWUSER user" 20 60 1
  passwd $NEWUSER &&
  whiptail --msgbox "User created successfully." 20 60 1
}


do_change_locale() {
  if [ "$INTERACTIVE" = True ]; then
    dpkg-reconfigure locales
  else
    local LOCALE="$1"
    if ! LOCALE_LINE="$(grep "^$LOCALE " /usr/share/i18n/SUPPORTED)"; then
      return 1
    fi
    local ENCODING="$(echo $LOCALE_LINE | cut -f2 -d " ")"
    echo "$LOCALE $ENCODING" > /etc/locale.gen
    sed -i "s/^\s*LANG=\S*/LANG=$LOCALE/" /etc/default/locale
    dpkg-reconfigure -f noninteractive locales
  fi
}

do_change_timezone() {
  if [ "$INTERACTIVE" = True ]; then
    dpkg-reconfigure tzdata
  else
    local TIMEZONE="$1"
    if [ ! -f "/usr/share/zoneinfo/$TIMEZONE" ]; then
      return 1;
    fi
    rm /etc/localtime
    echo "$TIMEZONE" > /etc/timezone
    dpkg-reconfigure -f noninteractive tzdata
  fi
}

get_hostname() {
    cat /etc/hostname | tr -d " \t\n\r"
}

do_hostname() {
  if [ "$INTERACTIVE" = True ]; then
    whiptail --msgbox "\
Please note: RFCs mandate that a hostname's labels \
may contain only the ASCII letters 'a' through 'z' (case-insensitive), 
the digits '0' through '9', and the hyphen.
Hostname labels cannot begin or end with a hyphen. 
No other symbols, punctuation characters, or blank spaces are permitted.\
" 20 70 1
  fi
  CURRENT_HOSTNAME=`cat /etc/hostname | tr -d " \t\n\r"`
  if [ "$INTERACTIVE" = True ]; then
    NEW_HOSTNAME=$(whiptail --inputbox "Please enter a hostname" 20 60 "$CURRENT_HOSTNAME" 3>&1 1>&2 2>&3)
  else
    NEW_HOSTNAME=$1
    true
  fi
  if [ $? -eq 0 ]; then
    echo $NEW_HOSTNAME > /etc/hostname
    sed -i "s/127.0.1.1.*$CURRENT_HOSTNAME/127.0.1.1\t$NEW_HOSTNAME/g" /etc/hosts
    ASK_TO_REBOOT=1
  fi
}

do_overclock() {
    whiptail --msgbox "Not implemented for Jornada." 20 60 2
    return 1
}

set_overclock() {
  if [ "$INTERACTIVE" = True ]; then
    whiptail --msgbox "Set overclock to preset '$1'" 20 60 2
  fi
}

clear_overclock () {
  if [ "$INTERACTIVE" = True ]; then
    whiptail --msgbox "Set overclock to preset 'None'" 20 60 2
  fi
}

get_ssh() {
  if service ssh status | grep -q inactive; then
    echo 1
  else
    echo 0
  fi
}

do_ssh() {
  if [ -e /var/log/regen_ssh_keys.log ] && ! grep -q "^finished" /var/log/regen_ssh_keys.log; then
    whiptail --msgbox "Initial ssh key generation still running. Please wait and try again." 20 60 2
    return 1
  fi
  DEFAULT=--defaultno
  if [ $(get_ssh) -eq 0 ]; then
    DEFAULT=
  fi
  if [ "$INTERACTIVE" = True ]; then
    whiptail --yesno \
      "Would you like the SSH server to be enabled?\n\nCaution: Default and weak passwords are a security risk when SSH is enabled!" \
      $DEFAULT 20 60 2
    RET=$?
  else
    RET=$1
  fi
  if [ $RET -eq 0 ]; then
    ssh-keygen -A &&
    update-rc.d ssh enable &&
    invoke-rc.d ssh start &&
    STATUS=enabled
  elif [ $RET -eq 1 ]; then
    update-rc.d ssh disable &&
    invoke-rc.d ssh stop &&
    STATUS=disabled
  else
    return $RET
  fi
  if [ "$INTERACTIVE" = True ]; then
    whiptail --msgbox "The SSH server is $STATUS" 20 60 1
  fi
}

disable_raspi_config_at_boot() {
  if [ -e /etc/profile.d/jornada-config.sh ]; then
    rm -f /etc/profile.d/jornada-config.sh
  fi
}

enable_raspi_config_at_boot() {
  echo "/opt/jornada-config/jornada-config" > /etc/profile.d/jornada-config.sh
}

do_boot_behaviour() {
  if [ "$INTERACTIVE" = True ]; then
    BOOTOPT=$(whiptail --title "$TITLE" --backtitle="$BTITLE" --menu "Boot Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
      "L Login" "Require user to login" \
      "A Autologin" "Automatic login as '$USER' user" \
      "D Desktop" "After login: Start desktop" \
      "C Console" "After login: Stay on console" \
      "S Shell ..." "Setup shell for console session" \
      "X X11 ..." "Setup X11 window manager" \
      3>&1 1>&2 2>&3)
  else
    BOOTOPT=$1
    true
  fi
  if [ $? -eq 0 ]; then
    case "$BOOTOPT" in
      L*)
        cp -f /opt/jornada-config/scripts/inittab.noauto /etc/inittab
        whiptail --msgbox "Autologin disabled from next boot." 14 60 2
        ;;
      A*)
        cat /opt/jornada-config/scripts/inittab.auto | sed -e s/AUTOUSER/$USER/g > /etc/inittab
        whiptail --msgbox "System set to automatic login for $USER." 14 60 2
        ;;
      D*)
	rm ~/.bash_profile
	echo "startx" > ~/.bash_profile
        whiptail --msgbox "Desktop will autostart." 14 60 2
        ;;
      C*)
	rm ~/.bash_profile
        whiptail --msgbox "Desktop will not autostart." 14 60 2
	;;
      S*) do_shell_setup ;;
      X*) do_x11_wm_setup ;;
      *)
        whiptail --msgbox "Programmer error, unrecognised boot option" 20 60 2
        return 1
        ;;
    esac
  fi
}

do_update() {
  whiptail --infobox "Please standby while updating..." 10 60 1
  (cd /opt/jornada-config && git pull)
  # git clone https://github.com/timob0/jornada-config.git /opt/jornada-config
  whiptail --infobox "Sleeping 5 seconds before reloading...\n" 10 60 1
  sleep 5 &&
  exec /opt/jornada-config/jornada-config
}

get_wifi_available() {
  TECH=`connmanctl technologies`
  if (echo "$TECH" | grep -q WiFi) then
    return 1
  else
    return 0
  fi
}

get_wifi_active() {
  TECH=`connmanctl technologies`
  if (echo "$TECH" | grep -q "Powered = True") then
    return 1
  else
    return 0
  fi
}

get_wifi_connected() {
  TECH=`connmanctl technologies`
  if (echo "$TECH" | grep -q "Connected = True") then
    return 1
  else
    return 0
  fi
}

do_enable_wifi() {
  connmanctl enable wifi
}

do_disable_wifi() {
  connmanctl disable wifi
}

do_scan_networks() {
  connmanctl scan wifi
}

do_list_wlan_networks() {
  connmanctl services
}

do_connect_wifi() {
  connmanctl connect $1
}

do_switch_wifi_power() {
  if (whiptail --title "Wifi Status" --yes-button "Wifi On" --no-button "Wifi Off"  --yesno "Please select On or Off to switich Wifi state" 10 60) then
    whiptail --infobox "Enabling Wifi..." 10 60 1
    do_enable_wifi
  else
    whiptail --infobox "Disabling Wifi..." 10 60 1
    do_disable_wifi
  fi
}

do_switch_wifi_net() {
  if (get_wifi_available) then
    echo ""
  else
    whiptail --msgbox "Wifi not available, please check network card" 14 60
    return 1
  fi

  if (get_wifi_active) then
    echo ""
  else
    whiptail --infobox "Wifi not active, trying to power on ..." 14 60
    do_enable_wifi
    if (get_wifi_active) then
      echo ""
    else
      whiptail --msgbox "Could not activate WiFi, aborting." 14 60
      return 0
    fi
  fi

  NETWORKS=`ls /var/lib/connman/wifi* | awk '{print $1 " WiFi OFF"}'`
  echo $NETWORKS
  NETWORK_ID=$(whiptail --title "$TITLE" --backtitle="$BTITLE" --radiolist "Select WiFi network to connect" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
	    $NETWORKS \
      3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    whiptail --infobox "Connecting to network $NETWORK_NAME" 14 60 1
    connmanctl connect $NETWORK_ID
  else
    whiptail --msgbox "Cancelled." 14 60 1
    return 0
  fi

  return 0
}

do_wifi_setup() {
  if (get_wifi_available) then
    echo ""
  else
    whiptail --msgbox "Wifi not available, please check network card" 14 60
    return 1
  fi

  if (get_wifi_active) then
    echo ""
  else
    whiptail --infobox "Wifi not active, trying to power on ..." 14 60
    do_enable_wifi
    if (get_wifi_active) then
      echo ""
    else
      whiptail --msgbox "Could not activate WiFi, aborting." 14 60
      return 0
    fi
  fi

  whiptail --infobox "Scanning wifi networks ..." 14 60
  do_scan_networks
  NETWORKS=`connmanctl services | cut -c5- | awk '{print $1 " " $2 " OFF"}'`
  echo $NETWORKS
  NETWORK_NAME=$(whiptail --title "$TITLE" --backtitle="$BTITLE" --radiolist "Select WiFi network to configure" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
	    $NETWORKS \
      3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    whiptail --msgbox "Using network $NETWORK_NAME" 14 60 1
  else
    whiptail --msgbox "Cancelled." 14 60 1
    return 0
  fi

  NETWORK_DATA=$(echo $NETWORKS | grep $NETWORK_NAME)
  NETWORK_ID=$($NETWORK_DATA | cut -f2 -d' ') 
  NETWORK_SSID=$($NETWORK_ID | cut -f2 -d'_') 
  echo $NETWORK_DATA
  echo $NETWORK_ID
  echo $NETWORK_SSID

  if [ -f /var/lib/connman/$NETWORK_ID ]; then
    whiptail --yesno  "Network $NETWORK_NAME already configured, do you want to reconfigure?" 14 60 1
    if [ $? -eq 0 ]; then
      whiptail --infobox "Deleting previous configuration ..." 14 60 1
      rm -rf /var/lib/connman/$NETWORK_ID
    else
      whiptail --infobox "Cancelled." 14 60 1
      return 0
    fi
  fi

  PASSPHRASE=$(whiptail --inputbox "Please enter passphrase for $NETWORK_NAME. Leave it empty if none." 14 60 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    return 0
  else
    break
  fi

  # Write connmanctl config file
  mkdir /var/lib/connman/$NETWORK_ID
  cfgfile="/var/lib/connman/$NETWORK_ID/settings"
  tstamp=`date --utc +%FT%T.%6NZ`
  touch $cfgfile
  echo "[$NETWORK_ID]" >> $cfgfile
  echo "Name=$NETWORK_NAME" >> $cfgfile
  echo "SSID=$NETWORK_SSID" >> $cfgfile
  echo "Favorite=True" >> $cfgfile
  echo "AutoConnect=True" >> $cfgfile
  echo "Modified=$tstamp" >> $cfgfile
  echo "Passphrase=$PASSPHRASE" >> $cfgfile
  echo "IPv4.method=DHCP" >> $cfgfile
  echo "IPv6.method=off" >> $cfgfile
  echo "IPv6.privacy=disabled" >> $cfgfile

  whiptail --infobox "Configuration file written to $cfgfile, trying to connect now..." 14 60
  connmanctl connect $NETWORK_ID

  return 0
}

do_finish() {
  disable_raspi_config_at_boot
  if [ $ASK_TO_REBOOT -eq 1 ]; then
    whiptail --yesno "Would you like to reboot now?" 20 60 2
    if [ $? -eq 0 ]; then # yes
      sync
      reboot
    fi
  fi
  exit 0
}

do_nothing() {
  if [ "$INTERACTIVE" = True ]; then
    whiptail --msgbox "This is not yet implemented" 20 60
  fi
}

get_brightness() {
  RET=`cat /sys/class/backlight/s1d13xxxfb/brightness`
  return $RET
}

get_contrast() {
  RET=`cat /sys/devices/platform/jornada_lcd/lcd/s1d13xxxfb/contrast`
  return $RET
}

set_brightness() {
  echo $1 > /sys/class/backlight/s1d13xxxfb/brightness
}

set_contrast() {
  echo $1 > /sys/devices/platform/jornada_lcd/lcd/s1d13xxxfb/contrast
}

do_lcd_setup() {
  while true; do
    BRIGHT=`cat /sys/class/backlight/s1d13xxxfb/brightness`
    CONTRAST=`cat /sys/devices/platform/jornada_lcd/lcd/s1d13xxxfb/contrast`
    
    FUN=$(whiptail --title "$TITLE" --backtitle="$BTITLE" --menu "LCD Setup" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
      "B  (*) >>" "Brightness increase ($BRIGHT)" \
      "V  (*) <<" "           decrease" \
      "C  (#) >>" "Contrast increase ($CONTRAST)" \
      "X  (#) <<" "         decrease" \
      "S Save" "Save settings to ${USER}s profile" \
      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
      return 0
    elif [ $RET -eq 0 ]; then
      case "$FUN" in
        B\ *) BRIGHT=$(($BRIGHT+5)) && set_brightness $BRIGHT ;;
        V\ *) BRIGHT=$(($BRIGHT-5)) && set_brightness $BRIGHT ;;
        C\ *) CONTRAST=$(($CONTRAST+5)) &&  set_contrast $CONTRAST ;;
        X\ *) CONTRAST=$(($CONTRAST-5)) &&  set_contrast $CONTRAST ;;
        S\ *) do_nothing ;;
        *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
      esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
  done
}

do_poweroff() {
  if (whiptail --title "Powerdown" --yes-button "Yes" --no-button "No"  --yesno "Poweroff the system?" 10 60) then
    whiptail --infobox "Powering down..." 10 60 1
    poweroff
  else
    return 0
  fi
}

do_change_keyboard() {
  # check if all scripts are in place
  if [ ! -f /etc/init.d/j720-keyboard.sh ]; then
    cp -f /opt/jornada-config/scripts/init/j720-keyboard.sh /etc/init.d
    update-rc.d j720-keyboard.sh defaults
    update-rc.d console-setup disable
    whiptail --msgbox "Copied j720-keyboard script to /etc/init.d" 10 60 1
  fi 

  if (whiptail --title "Keyboard layout" --yes-button "US" --no-button "German"  --yesno "Please select which keymap to install at boot time. The change will become effective immediately." 10 60) then
    whiptail --infobox "Install and load US keymap..." 10 60 1
    cp -f /opt/jornada-config/keymaps/us-j720-key.map /etc/j720-key.map
  else
    whiptail --infobox "Install and load keymap..." 10 60 1
    cp -f /opt/jornada-config/keymaps/de-j720-key.map /etc/j720-key.map
  fi
  /etc/init.d/j720-keyboard.sh start
}

do_shell_setup() {
  SHELLS=`cat /etc/shells | grep '/bin' | sort -u | awk -v shell=$SHELL '{ print ($1!=shell)?$1 " shell " "OFF ":$1 " shell " "ON " }'`
  echo $SHELLS
  SHELLOPT=$(whiptail --title "$TITLE" --backtitle="$BTITLE" --radiolist "Shell setup" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
	$SHELLS \
      3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    chsh $USER -s $SHELLOPT
    whiptail --msgbox "Your shell has been changed to $SHELLOPT from next login." 14 60 1    
  fi
}

do_x11_wm_setup() {
  whiptail --infobox "Please select your desired X11 window manager" 10 60 1
  update-alternatives --config x-window-manager
}

nonint() {
  "$@"
}

#
# Command line options for non-interactive use
#
for i in $*
do
  case $i in
  --expand-rootfs)
    do_expand_rootfs
    printf "Please reboot\n"
    exit 0
    ;;
  --asroot)
    USER=root
    ;;
  --install)
    enable_raspi_config_at_boot
    printf "Config utility installed at next boot"
    exit 0;
    ;;
  --update)
    do_update
    exit 0;
    ;;
  nonint)
    INTERACTIVE=False
    "$@"
    exit $?
    ;;
  *)
    # unknown option
    ;;
  esac
done

# Everything else needs to be run as root
if [ $(id -u) -ne 0 ]; then
  printf "Script requires elevated rights. Try 'sudo jornada-config'\n"
  exit 1
fi

do_system_menu() {
  FUN=$(whiptail --title "$TITLE" --backtitle="$BTITLE" --menu "System Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "S1 WiFi ..." "Configure WiFi network" \
    "S3 Password" "Change password for the '$USER' user" \
    "S4 Hostname" "Set name for this computer on a network" \
    "S6 Add User ..." "Add a regular user account" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      S1\ *) do_wifi_setup ;;
      S3\ *) do_change_pass ;;
      S4\ *) do_hostname ;;
      S7\ *) do_add_user ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

do_interface_menu() {
  FUN=$(whiptail --title "$TITLE" --backtitle="$BTITLE" --menu "Interfacing Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "S SSH" "Enable/disable remote command line access using SSH" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      S\ *) do_ssh ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

do_performance_menu() {
  FUN=$(whiptail --title "$TITLE" --backtitle="$BTITLE" --menu "Performance Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "O Overclock" "Configure CPU clock" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      O\ *) do_nothing ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

do_internationalisation_menu() {
  FUN=$(whiptail --title "$TITLE" --backtitle="$BTITLE" --menu "Localisation Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "L Locale ..." "Configure language and regional settings" \
    "T Timezone ..." "Configure time zone" \
    "K Keyboard" "Set keyboard layout to match your keyboard" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      L\ *) do_change_locale ;;
      T\ *) do_change_timezone ;;
      K\ *) do_change_keyboard ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

do_advanced_menu() {
  if is_jornada ; then
    FUN=$(whiptail --title "$TITLE" --backtitle="$BTITLE" --menu "Advanced Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
      "E Expand Filesystem" "Ensures that all of the SD card is available" \
      3>&1 1>&2 2>&3)
  fi
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      E\ *) do_expand_rootfs ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

#
# Interactive use loop
#
if [ "$INTERACTIVE" = True ]; then
  [ -e $CONFIG ] || touch $CONFIG
  calc_wt_size
   while true; do
    if [ "$USER" = "root" ]; then
      FUN=$(whiptail --title "$TITLE, SYSTEM options ($USER)" --backtitle="$BTITLE" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
        "S System ..." "Configure system settings" \
        "I Interfaces ..." "Configure external interfaces (SSH, ...)" \
        "L Localisation ..." "Configure language, regional and keyboard settings" \
        "V Advanced ..." "Configure advanced settings" \
        "U Update" "Update this tool to the latest version" \
        "A About" "Information about this tool" \
        3>&1 1>&2 2>&3)
    else
      FUN=$(whiptail --title "$TITLE, USER options ($USER)" --backtitle="$BTITLE" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
        "W WiFi Power" "Turn Wifi on/off" \
        "E WiFi Connect" "Switch WiFi network" \
        "R WiFi ..." "Configure WiFi networks" \
        "L LCD ..." "Set the screen brightness and contrast" \
        "S Startup ..." "System Startup Options" \
        "0 Shutdown" "Poweroff the machine" \
        "P Password" "Change password for the '$USER' user" \
        "A About" "Information about this tool" \
        3>&1 1>&2 2>&3)
    fi
    RET=$?
    if [ $RET -eq 1 ]; then
      do_finish
    elif [ $RET -eq 0 ]; then
      case "$FUN" in
        S\ *) do_system_menu ;;
        I\ *) do_interface_menu ;;
        L\ *) do_internationalisation_menu ;;
        V\ *) do_advanced_menu ;;
        U\ *) do_update ;;
        A\ *) do_about ;;
        W\ *) do_switch_wifi_power ;;
        E\ *) do_switch_wifi_net ;;
        R\ *) do_wifi_setup ;;
        L\ *) do_lcd_setup ;;
        S\ *) do_boot_behaviour ;;
        0\ *) do_poweroff ;;
        P\ *) do_change_pass ;;
        *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
      esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    else
      exit 1
    fi
  done
fi
